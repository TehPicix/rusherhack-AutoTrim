plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
}

// version = project.plugin_version
group = project.maven_group
archivesBaseName = project.plugin_id

configurations {
	rusherhackApi
	compileOnly.extendsFrom(rusherhackApi)
	productionRuntime {
		extendsFrom configurations.minecraftLibraries
		extendsFrom configurations.loaderLibraries
		extendsFrom configurations.minecraftRuntimeLibraries
	}
}

repositories {
	maven {
		name = "rusherhack"
		url = "https://maven.rusherhack.org/snapshots"
	}
	maven {
		name = "ParchmentMC"
		url = "https://maven.parchmentmc.org"
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	productionRuntime(modImplementation("net.fabricmc:fabric-loader:${project.fabric_loader_version}"))
	productionRuntime("net.fabricmc:intermediary:${project.minecraft_version}")
	rusherhackApi "org.rusherhack:rusherhack-api:$minecraft_version-SNAPSHOT"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.parchment_version}@zip")
	}
}

tasks.register('updateAccessWidener', Copy) {
	group = "build"
	outputs.upToDateWhen { false }
	def accessWidenerFile = zipTree(this.project.configurations.rusherhackApi.singleFile).matching { include "rusherhack.accesswidener" }.files.iterator().next()
	from(accessWidenerFile) into(file("build/tmp/" + this.project.minecraft_version))
}


def targetJavaVersion = project.java_version
java.sourceCompatibility = JavaLanguageVersion.of(targetJavaVersion)
java.targetCompatibility = JavaLanguageVersion.of(targetJavaVersion)
java.toolchain.languageVersion.set(JavaLanguageVersion.of(targetJavaVersion))
tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = Integer.parseInt(targetJavaVersion)
}

processResources {
	filesMatching("rusherhack-plugin.json") {
		expand(project: project)
	}
}

jar {
	manifest {
		attributes("Minecraft-Version": project.minecraft_version)
	}
}

def libsDir = layout.buildDirectory.dir("libs")

tasks.register("devJar", Copy) {
    group = "build"
    dependsOn tasks.named("remapJar")
    from(tasks.named("remapJar").flatMap { it.archiveFile }) into(libsDir)
    rename { _ -> "${project.archivesBaseName}-${project.plugin_version}.jar" }
}

tasks.named("build") {
    dependsOn("devJar")
}